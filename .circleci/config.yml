# Python CircleCI 2.0 configuration file
version: 2.1
jobs:
  test:
    docker:
      - image: cimg/python:3.8-node

    working_directory: ~/repo

    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      # Step 2: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            sudo apt-get update --yes --quiet && sudo apt-get install --yes --quiet --no-install-recommendsapt ffmpeg
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            # pip install anybadge
            # pip install python-coveralls
            pip install coveralls
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            # Install deepsource CLI
            curl https://deepsource.io/cli | sh
            # copy vendor libs
            sudo npm install -g grunt-cli
            npm install
            grunt all
            # ENV variables
            mkdir -p env/
            touch env/.dev.env
            echo "TENLISTS_SECRET_KEY_DEV='d765978f74057742ccb70338711946f356aa194e2e0f79f7373c9cbad3c34c54'" >> env/.dev.env
            echo "MAIL_SERVER_DEV=" >> env/.dev.env
            echo "MAIL_SERVER_DEV=smtp.mailtrap.io" >> env/.dev.env
            echo "MAIL_PORT_DEV=2525" >> env/.dev.env
            echo "TENLISTS_EMAIL_USER_DEV=" >> env/.dev.env
            echo "TENLISTS_EMAIL_PWD_DEV=" >> env/.dev.env
            echo "MAIL_USE_TLS=True" >> env/.dev.env
            echo "MAIL_USE_SSL=False" >> env/.dev.env
            echo "TENLISTS_MP3_CLOUD_STORAGE_BASE_URL=https://example.com/path/to/folder" >> env/.dev.env
            echo "TENLISTS_API_BASE=http://localhost:5000/ten-lists/api/v1.0/mp3s" >> env/.dev.env

      # Step 3: run tests
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            ./cc-test-reporter before-build
            pytest
            # flake8 --exclude=venv* --statistics
            # pylint --exit-zero --output-format=text *.py | tee pylint.txt
            # score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
            # echo "Pylint score was $score"
            # anybadge --value=$score --file=pylint.svg pylint
            coveralls
            ./cc-test-reporter after-build --coverage-input-type coverage.py
            # Report coverage artifact to 'test-coverage' analyzer
            ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.xml
      - run:
          name: Codacy Coverage Reporter
          command: |
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
      - store_artifacts:
          path: htmlcov
      - store_artifacts:
          path: coverage.xml
      # - store_artifacts:
      #     path: pylint.svg
  lint:
    docker:
      - image: cimg/python:3.8-node

    working_directory: ~/repo

    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      # Step 2: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv ../venv
            . ../venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            sudo npm install -g grunt-cli
            npm install && grunt all
      # Step 3: run linters
      # - run:
      #     name: MyPy
      #     command: |
      #       . ../venv/bin/activate
      #       mypy tenlists
      - run:
          name: Black
          command: |
            . ../venv/bin/activate
            black . --check
      - run:
          name: isort
          command: |
            . ../venv/bin/activate
            isort . --check-only --profile black
      - run:
          name: Flake8
          command: |
            . ../venv/bin/activate
            flake8 tests tenlists
      # - run:
      #     name: Stylelint
      #     command: |
      #       gulp lint-css
  pre_commit:
    # based on https://github.com/Unity-Technologies/ml-agents/blob/db19619775f0ca76c41a3780a4c776763aece141/.circleci/config.yml
    docker:
      - image: cimg/python:3.8-node

    working_directory: ~/repo

    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      # Step 2: pre-caching operations
      - run:
          name: Combine precommit config and python versions for caching
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      # Step 3: Restores a previously saved cache based on a key
      - restore_cache:
          keys:
            - v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
      # Step 4: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv ../venv
            . ../venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            sudo npm install -g grunt-cli
            npm install && grunt all
      # Step 5: generates and store a cache
      - save_cache:
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit
      # Step 6: run pre-commit
      - run:
          name: Check Code Style using pre-commit
          command: |
            . ../venv/bin/activate
            pre-commit run --show-diff-on-failure --all-files
workflows:
  version: 2
  lint_and_test:
    jobs:
      - lint
      - pre_commit
      - test:
          requires:
            - lint
            - pre_commit
