[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
authors = ["Victor Miti"]
description = "Generates a daily playlist of 10 Bible chapters (mp3 files) based on Professor Grant Horner's 10-list Bible-reading system"
name = "tenlists"
packages = [{ include = "tenlists" }]
readme = "README.md"
version = "1.0.1"

[tool.poetry.dependencies]
# Platform
python = "~3.12"

# Core
colorama = "0.4.6"
eyed3 = "0.9.7"
flask = "2.3.3"
flask-bcrypt = "0.7.1"
flask-debugtoolbar = "0.16.0"
flask-httpauth = "4.8.0"
flask-login = "0.6.3"
flask-mail = "0.10.0"
flask-moment = "1.0.6"
flask-restful = "0.3.10"
flask-talisman = "1.1.0"
flask-wtf = "0.15.1"
markupsafe = "2.1.5"
termcolor = "1.1.0"
python-dotenv = "0.21.1"
pyfiglet = "1.0.2"

# Utils
bpython = "0.24"
# https://stackoverflow.com/questions/69919970/no-module-named-distutils-util-but-distutils-installed
setuptools = "74.1.3"

# Production
gunicorn = "23.0.0"
sentry-sdk = "2.19.2"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "24.10.0"
commitizen = "3.31.0"
honcho = "1.1.0"
invoke = "2.2.0"
pre-commit = "2.21.0"
pyupgrade = "3.19.0"
ruff = "0.7.4"
tomli = "2.1.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coveralls = "^4.0.1"
faker = "8.16.0"
gtts = "2.5.4"
tqdm = "4.67.1"
pytest-cov = "5.0.0"
pytest-flask = "1.3.0"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | (.*)/migrations
    | dist
  )/
)
'''

[tool.ruff]
exclude = [".git", "__pycache__", ".pytest_cache", "node_modules", "LC_MESSAGES", "public", "venv", ".venv"]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
ignore = ["E203", "E266", "E501"]
select = ["B", "C", "E", "F", "W", "B9"]

[tool.ruff.lint.isort]
known-first-party = ["tenlists"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.coverage.run]
branch = true
omit = [
    "venv/*",
    "tenlists/utils/*",
    "manage.py",
    "tasks.py"
]

[tool.coverage.report]
skip_covered = true
show_missing = true

[tool.pytest.ini_options]
addopts = "--cov=. --cov-report=html --cov-report=xml --cov-report=term-missing:skip-covered -s -vv"
testpaths = ["tests"]
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py"
]

[tool.commitizen]
annotated_tag = true
tag_format = "v$major.$minor.$patch"
update_changelog_on_bump = false
version_files = [
    # "package.json",
    "tenlists/__init__.py",
    "tenlists/cli/__init__.py",
    "tenlists/utils/__init__.py",
    "tenlists/webapp/__init__.py",
]
version_provider = "poetry"
